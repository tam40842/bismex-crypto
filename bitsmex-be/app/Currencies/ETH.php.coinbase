<?php
namespace App\Currencies;

use Illuminate\Support\Facades\Cache;
use App\Coinbase;

class ETH {

    protected $coinbase;
    public $symbol;

    public function __construct() {
        $this->coinbase = new Coinbase();
        $this->symbol = 'ETH';
    }
    
    public function account() {
        $list_account = $this->coinbase->getAccounts();
		for($i = 0; $i < count($list_account); $i++) {
			if(strtoupper($list_account[$i]['currency']) == $this->symbol) {
				$account = $list_account[$i];
			}
		}
		$status = ($account['id']) ? array('status' => true, 'id' => $account['id'], 'symbol' => $this->symbol, 'balance' => $account['balance']['amount']) : array('status' => false);
		return json_encode($status);
    }
    
    public function generateAddress($label = '') {
		$account = $this->account();
        $account = json_decode($this->account());
        $callback_url = route('api.coinbase');
        $result = $this->coinbase->createWallet($account->id, $label, $callback_url);
        $status = (!empty($result)) ? array('status' => true, 'symbol' => $this->symbol, 'address' => $result['address'], 'address_id' => $result['id']) : array('status' => false);
        return json_encode($status);
    }

	public function validator($address) {
        $validate = preg_match('/^0x[0-9A-Fa-f]{40}/i', $address);
        return $validate;
	}
    
    public function rate() {
        try {
            $get = json_decode(file_get_contents('https://api.binance.com/api/v1/ticker/24hr?symbol=ETHUSDT'));
            return $get->bidPrice;
        } catch (Exception $e) {
            $price = 0;
        }
        return $price;
    }
    
    
    public function percent_change() {
        try {
            $get = json_decode(file_get_contents('https://api.binance.com/api/v1/ticker/24hr?symbol=ETHUSDT'));
            return $get;
        } catch (Exception $e) {
            
        }
        return false;
    }
    
    public function transactionLink($address) {
        $url = '<a href="https://etherscan.io/address/'.$address.'" target="_blank">'.$address.'</a>';
        return $url;
    }
    
    public function hashLink($tx_id) {
		$url = 'https://etherscan.io/tx/0x'.$tx_id;
		return $url;
    }
    
    public function addressLink($address) {
		$url = 'https://etherscan.io/address/'.$address;
		return $url;
    }
    
	public function transfer($address, $amount, $memo) {
		$account = json_decode($this->account());
		$result = $this->coinbase->sendFunds($account->id, $address, $amount, $this->symbol, $memo);
		$status = (!empty($result) && $result['id'] && $result['amount']['amount'] && $result['amount']['currency'] == $this->symbol && $result['description'] == $memo) ? array('status' => true, 'symbol' => $this->symbol, 'address' => $address, 'description' => $memo, 'amount' => $amount, 'response' => json_encode($result)) : array('status' => false, 'msg' => $result);
		return json_encode($status);
	}
}
